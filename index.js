// Generated by LiveScript 1.4.0
var ref$, isType, map, pairsToObj, camelize, upper, lower, snake, pascal, camel, kebab, constant, capital, title, flip, isArray, isObject, changeCaseDeep;
ref$ = require('prelude-ls'), isType = ref$.isType, map = ref$.map, pairsToObj = ref$.pairsToObj, camelize = ref$.camelize;
ref$ = require('case'), upper = ref$.upper, lower = ref$.lower, snake = ref$.snake, pascal = ref$.pascal, camel = ref$.camel, kebab = ref$.kebab, constant = ref$.constant, capital = ref$.capital, title = ref$.title, flip = ref$.flip;
isArray = function(arg){
  return isType('Array', arg);
};
isObject = function(arg){
  return isType('Object', arg);
};
changeCaseDeep = function(fn){
  var setValue, changeCase;
  setValue = function(val){
    if (!(isArray(val) || isObject(val))) {
      return val;
    } else {
      return changeCase(
      val);
    }
  };
  changeCase = function(entity){
    var i$, x$, len$, keyValue$, results$ = [], own$ = {}.hasOwnProperty, resultObj$ = {};
    if (isArray(entity)) {
      for (i$ = 0, len$ = entity.length; i$ < len$; ++i$) {
        x$ = entity[i$];
        results$.push(changeCase(x$));
      }
      return results$;
    } else if (isObject(entity)) {
      for (i$ in entity) if (own$.call(entity, i$)) {
        resultObj$[(keyValue$ = (fn$.call(this, i$, entity[i$])))[0]] = keyValue$[1];
      }
      return resultObj$;
    } else {
      return entity;
    }
    function fn$(key, val){
      return [
        fn(
        key), setValue(
        val), entity
      ];
    }
  };
  return changeCase;
};
module.exports = pairsToObj(
map(function(it){
  return [camelize(it[0] + "-case"), it[1]];
})(
[['camel', changeCaseDeep(camel)], ['upper', changeCaseDeep(upper)], ['lower', changeCaseDeep(lower)], ['snake', changeCaseDeep(snake)], ['pascal', changeCaseDeep(pascal)], ['kebab', changeCaseDeep(kebab)], ['constant', changeCaseDeep(constant)], ['capital', changeCaseDeep(capital)], ['title', changeCaseDeep(title)], ['flip', changeCaseDeep(flip)]]));